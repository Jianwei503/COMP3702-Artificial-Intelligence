import ctypes
import time

grid = [['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], ['#', 'I', 'I', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#'], ['#', '#', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', '#', '#', 'I', 'U', '#', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', '#', '#', '#', 'R', 'I', '#'], ['#', 'I', 'I', 'I', 'I', 'K', 'I', 'K', 'I', 'K', 'I', 'I', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'K', 'I', 'I', 'I', 'I', 'I', 'K', '#'], ['#', 'I', '#', '#', '#', 'I', 'U', 'I', '#', '#', '#', '#', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'I', '#'], ['#', 'I', '#', 'I', 'I', 'I', '#', 'I', '#', 'I', 'I', 'I', 'I', 'K', 'I', 'I', '#', 'K', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', '#'], ['#', 'I', '#', 'I', '#', '#', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', 'I', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', '#', '#', 'I', '#'], ['#', 'I', '#', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'F', 'I', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', '#'], ['#', '#', '#', '#', 'D', '#', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', 'I', '#', '#', 'U', 'I', '#', 'I', '#', 'I', 'D', '#', '#', 'I', '#', 'I', '#'], ['#', 'I', 'I', 'K', 'I', 'I', 'I', 'K', 'I', 'K', 'I', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', 'I', 'K', 'I', 'I', '#'], ['#', 'I', '#', 'I', '#', '#', '#', 'I', 'L', '#', 'U', '#', '#', '#', '#', '#', 'R', 'I', '#', '#', '#', 'I', '#', '#', '#', 'I', '#', 'I', 'U', '#', '#'], ['#', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'K', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', '#', 'K', 'I', 'I', '#'], ['#', '#', '#', '#', '#', 'I', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'I', 'L', '#', '#', '#', '#', '#', '#', '#', '#', 'I', '#', '#', '#'], ['#', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'K', '#', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'K', 'I', 'I', '#'], ['#', 'I', '#', '#', '#', '#', '#', 'I', '#', '#', '#', '#', '#', '#', 'D', 'I', '#', 'I', '#', 'I', '#', 'I', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#'], ['#', 'K', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'K', '#', 'I', '#'], ['#', 'I', '#', 'I', '#', 'I', '#', 'I', '#', '#', '#', '#', 'R', 'I', '#', 'I', '#', '#', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', '#', '#'], ['#', 'I', '#', 'K', 'I', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'I', '#'], ['#', '#', 'R', 'I', 'U', '#', '#', '#', '#', 'I', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'I', '#'], ['#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'K', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', '#'], ['#', 'I', '#', '#', '#', '#', '#', 'I', '#', '#', '#', '#', 'D', 'I', '#', '#', '#', '#', '#', 'I', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', '#', '#'], ['#', 'I', '#', ' ', 'I', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', '#'], ['#', 'I', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', '#', '#', 'I', 'U', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'I', '#', '#', 'R', 'I', '#'], ['#', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', 'I', 'K', '#'], ['#', 'I', '#', 'I', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', '#', 'R', 'I', '#'], ['#', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'K', 'I', 'I', '#', 'I', '#', 'I', 'I', 'K', '#'], ['#', 'I', '#', 'I', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'D', 'I', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', 'I', '#', '#', '#', 'I', '#'], ['#', 'I', '#', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'I', 'I', 'K', 'I', 'K', 'I', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#', 'I', '#', 'I', 'I', 'I', '#'], ['#', '#', '#', '#', '#', 'I', '#', 'I', 'D', '#', '#', '#', '#', 'I', '#', '#', '#', '#', '#', 'I', '#', 'I', '#', 'I', '#', '#', 'D', 'I', '#', '#', '#'], ['#', 'I', 'I', 'I', 'I', 'K', 'I', 'K', 'I', 'I', 'I', 'I', 'I', 'I', '#', 'I', 'I', 'I', 'I', 'I', '#', 'I', '#', 'I', '#', 'I', 'I', 'K', 'I', 'I', '#'], ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']]

class Node():
    def __init__(self, a=None, b=None, c=[]):
        self.a = a
        self.b = b
        self.c = c

    def set_ab(self):
        self.a = 'A'
        self.b = 'B'

    def print_ab(self):
        print("a = {}, b = {}, c = {}".format(self.a, self.b, self.c))

def test_variable():
    a = 2
    b = a
    print("a = {}, b = {}".format(a, b))

    a += 1
    print("a = {}, b = {}".format(a, b))

def test_obj():
    node = Node(2, 3)
    new_node = node
    node.print_ab()
    new_node.print_ab()

    # new_node.set_ab()
    # node.print_ab()
    # new_node.print_ab()

    node.set_ab()
    node.print_ab()
    new_node.print_ab()

def test_deepcopy():
    node1 = Node(2, 3, ['a', 'b'])
    node2 = Node()
    node1.print_ab()
    node2.print_ab()
    print("____________________")

    node2.a = node1.a
    node2.b = node1.b
    node2.c = node1.c
    node1.print_ab()
    node2.print_ab()
    print("____________________")

    node2.a -= 2
    node2.b -= 3
    node1.print_ab()
    node2.print_ab()
    print("____________________")

    node2.c.append(2)
    node1.print_ab()
    node2.print_ab()
    print("____________________")

    node1.c[1] = 'X'
    node1.print_ab()
    node2.print_ab()

def test_ptr():
    node = Node(2, 3)
    addr = id(node)
    obj = ctypes.cast(addr, ctypes.py_object).value
    print(obj.a)

    # node = 'a'
    # addr = id(node)
    # obj = ctypes.cast(addr, ctypes.py_object).value
    # print(obj)

def test_hash():
    a1 = (3, 6)
    a2 = (3, 6)
    b1 = 2
    b2 = 2
    c1 = [['#', '#'], ['B', 'F']]
    c2 = [['#', '#'], ['B', 'F']]


    # print(hash((a1, b1, str(c1))))
    # print(hash((a2, b2, str(c2))))
    # print(hash((a1, b1, str(c1))))
    # print(hash((a1, b1, str(c1))))

    # d = {None: 3, None: 'x'}
    # print(d[None])

    start = time.perf_counter()
    print(hash((a1, b1, str(grid))))
    print(hash((a2, b2, str(grid))))
    print(hash((a1, b1, str(grid))))
    print(hash((a1, b1, str(grid))))
    print(hash((a2, b1, str(grid))))
    print(hash((b2, a2, str(grid))))
    print(hash((b1, b1, str(grid))))
    print(hash((a1, a1, str(grid))))
    end = time.perf_counter()
    out1 = end - start
    print(out1)

def test_access_speed():
    l = []
    s = set()
    for i in range(0, 999):
        l.append(i)
        s.add(i)

    start = time.perf_counter()
    if 'x' in l:
        print("list")
    end = time.perf_counter()
    out0 = end - start
    print("Access list: {}".format(out0))

    start = time.perf_counter()
    if 'x' in s:
        print("set")
    end = time.perf_counter()
    out1 = end - start
    print("Access set: {}".format(out1))
    print("list/set: {}".format(out0 / out1))

if __name__ == "__main__":
    # test_access_speed()
    # test_variable()
    # test_obj()
    # test_deepcopy()
    # test_ptr()
    test_hash()
